package org.example.Multithread.Methods;public class TryMethods extends  Thread {    @Override    public void run() {    for (int i = 0;i<15;i++){        System.out.println(i);        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            throw new RuntimeException(e);        }    }    }    public static void main(String[] args) throws InterruptedException {         TryMethods tryMethods = new TryMethods();//         tryMethods.start();//         //The join() method in Java is used to pause//        // the current thread until the thread on which join() was called has finished executing.//        //Current thread ---> Main thread//         tryMethods.join();         // This is done by main thread.So this wiull wait for t1 thread to be over because of t1.join()Hey        System.out.println("Hello !!");        Thread t1 = new Thread(()->{            Thread.currentThread().setName(" Thread-1");            System.out.println("Hey Thread 1");            Thread t2 = new Thread(()->{                Thread.currentThread().setName("Thread 2");                System.out.println("Inside of  Thread 2");            });            System.out.println("Current Thread ---> "+Thread.currentThread().getName() +"---->"+Thread.currentThread().getState());             t2.start();            try {                t2.join();            } catch (InterruptedException e) {                throw new RuntimeException(e);            }        });        t1.start();    }}